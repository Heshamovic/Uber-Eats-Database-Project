<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnDownload.Text" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="btnDownload.ToolTip" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="btnSave.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="btnSave.ToolTip" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="btnUpload.Text" xml:space="preserve">
    <value>Upload zipped Visual Studio project</value>
  </data>
  <data name="btnUpload.ToolTip" xml:space="preserve">
    <value>Upload zipped Visual Studio project</value>
  </data>
  <data name="cvldUploadFile.ErrorMessage" xml:space="preserve">
    <value>File can be only resx or zip archive!</value>
  </data>
  <data name="FailSave" xml:space="preserve">
    <value>Error while saving</value>
  </data>
  <data name="FailUpload" xml:space="preserve">
    <value>Error while uploading</value>
  </data>
  <data name="False" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="hlnkDownload.Text" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="hlnkLabelDisplay.Text" xml:space="preserve">
    <value>Label Display</value>
  </data>
  <data name="hlnkUpload.Text" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="imgExclamation.AlternateText" xml:space="preserve">
    <value>Failed</value>
  </data>
  <data name="imgExclamation.ToolTip" xml:space="preserve">
    <value>Failed</value>
  </data>
  <data name="imgResult.AlternateText" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="imgResult.ToolTip" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="lblAdvancedOptions.Text" xml:space="preserve">
    <value>Advanced Options</value>
  </data>
  <data name="litLeaveExisting.Text" xml:space="preserve">
    <value>Will not overwrite the files already in the system but only append new files.</value>
  </data>
  <data name="litReplaceExisting.Text" xml:space="preserve">
    <value>Will overwrite all labels already in the system.</value>
  </data>
  <data name="litUploadFileDescription.Text" xml:space="preserve">
    <value>Note the format should be exact Visual Studio zipped file format.</value>
  </data>
  <data name="litUploadText.Text" xml:space="preserve">
    <value>Select file (only RESX or ZIP files):</value>
  </data>
  <data name="LoadingContentMessage" xml:space="preserve">
    <value>Loading content...</value>
  </data>
  <data name="ltrCustomPath.Text" xml:space="preserve">
    <value>Use custom path</value>
  </data>
  <data name="ltrCustomPathDescription.Text" xml:space="preserve">
    <value>Specify initial path in the server where resources should be addded/replaced.</value>
  </data>
  <data name="ltrDisplayForEditing.Text" xml:space="preserve">
    <value>Display for editing</value>
  </data>
  <data name="ltrDownloadText.Text" xml:space="preserve">
    <value>Download all labels in ZIP format.</value>
  </data>
  <data name="ltrDownloadTextOpen.Text" xml:space="preserve">
    <value>You can download all the resource files for this website by clicking the here.</value>
  </data>
  <data name="ltrFileAndLabel.Text" xml:space="preserve">
    <value>File and label</value>
  </data>
  <data name="ltrFileManagement.Text" xml:space="preserve">
    <value>File Management</value>
  </data>
  <data name="ltrLabelDisplayText.Text" xml:space="preserve">
    <value>Manage display of labels</value>
  </data>
  <data name="ltrLabelDisplayTextOpen.Text" xml:space="preserve">
    <value>You can configure if labels should be editable. If the option is not checked the label will not be shown in RESX Manager.</value>
  </data>
  <data name="ltrLabelDisplayTextOpen2.Text" xml:space="preserve">
    <value />
  </data>
  <data name="ltrUploadOptions.Text" xml:space="preserve">
    <value>Upload options:</value>
  </data>
  <data name="ltrUploadPath.Text" xml:space="preserve">
    <value>Upload path:</value>
  </data>
  <data name="ltrUploadText.Text" xml:space="preserve">
    <value>Upload Visual Studio project to replace resource files</value>
  </data>
  <data name="ltrUploadTextOpen.Text" xml:space="preserve">
    <value>Upload a complete Visual Studio project.</value>
  </data>
  <data name="ltrUsedInCode.Text" xml:space="preserve">
    <value>Used in code</value>
  </data>
  <data name="rbLeaveExisting.Text" xml:space="preserve">
    <value>Leave existing labels</value>
  </data>
  <data name="rbReplaceExisting.Text" xml:space="preserve">
    <value>Replace existing labels</value>
  </data>
  <data name="rqvldRootPath.ErrorMessage" xml:space="preserve">
    <value>You must specify root path!</value>
  </data>
  <data name="rqvldUploadFile.ErrorMessage" xml:space="preserve">
    <value>File is required!</value>
  </data>
  <data name="SuccessfulSave" xml:space="preserve">
    <value>Saved successfully {0}</value>
  </data>
  <data name="SuccessfulUpload" xml:space="preserve">
    <value>Uploaded successfully {0}</value>
  </data>
  <data name="True" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="vsUpload.HeaderText" xml:space="preserve">
    <value>Please check required fields:</value>
  </data>
</root>